name: Deploy Control Alt Repeat
on:
  push
env:
  AWS_REGION : eu-west-2

permissions:
  id-token: write
  # Required: allow read access to the content for analysis.
  contents: read
  # Optional: allow read access to pull request. Use with `only-new-issues` option.
  pull-requests: read
  # Optional: allow write access to checks to allow the action to annotate code in the PR.
  checks: write

jobs:
  checkout-source-code:
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v2
      - name: Create temporary directory and archive source code
        run: |
          # Create a temporary directory
          TEMP_DIR=$(mktemp -d)

          # Copy files to the temporary directory
          cp -r . "$TEMP_DIR"

          # Create a tar archive from the temporary directory
          tar -czf source-code.tar.gz -C "$TEMP_DIR" .

          # Clean up the temporary directory
          rm -rf "$TEMP_DIR"
      - name: Upload source code as artifact
        uses: actions/upload-artifact@v3
        with:
          name: source-code
          path: source-code.tar.gz

  # go-critic:
  #   needs: checkout-source-code
  #   uses: ./.github/workflows/go-critic.yaml
  #   secrets: inherit
  # go-imports:
  #   needs: checkout-source-code
  #   uses: ./.github/workflows/go-imports.yaml
  #   secrets: inherit
  golangci-lint:
    needs: checkout-source-code
    uses: ./.github/workflows/golangci-lint.yaml
    secrets: inherit
  # go-sec:
  #   needs: checkout-source-code
  #   uses: ./.github/workflows/go-sec.yaml
  #   secrets: inherit
  # go-vet:
  #   needs: checkout-source-code
  #   uses: ./.github/workflows/go-vet.yaml
  #   secrets: inherit
  # go-vulncheck:
  #   needs: checkout-source-code
  #   uses: ./.github/workflows/go-vulncheck.yaml
  #   secrets: inherit

  # go-static-checks:
  #   runs-on: ubuntu-latest
  #   needs:
  #     # - go-critic
  #     # - go-imports
  #     - golangci-lint
  #     # - go-sec
  #     # - go-vet
  #     # - go-vulncheck
  #   steps:
  #     - name: Go Static Checks
  #       run: echo "Go static analysis has completed successfully"
 
  main-pipeline:
    runs-on: ubuntu-latest
    needs: golangci-lint
    steps:
      - uses: hashicorp/setup-terraform@v3
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: '1.23.x'
      - name: configure aws credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/GitHubOIDC
          aws-region: eu-west-2
          role-session-name: OIDCRoleSessions

      - run: ./scripts/build-lambda-functions.sh

      - run: terraform fmt -check

      - run: terraform init
        working-directory: configs/test
      - run: terraform validate -no-color
        working-directory: configs/test
      - run: terraform apply -auto-approve
        working-directory: configs/test

      - run: terraform init
        working-directory: configs/live
      - run: terraform validate -no-color
        working-directory: configs/live
      - run: terraform apply -auto-approve
        working-directory: configs/live
